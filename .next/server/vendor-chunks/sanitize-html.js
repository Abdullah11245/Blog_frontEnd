/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sanitize-html";
exports.ids = ["vendor-chunks/sanitize-html"];
exports.modules = {

/***/ "(ssr)/./node_modules/sanitize-html/index.js":
/*!*********************************************!*\
  !*** ./node_modules/sanitize-html/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const htmlparser = __webpack_require__(/*! htmlparser2 */ \"(ssr)/./node_modules/htmlparser2/lib/index.js\");\nconst escapeStringRegexp = __webpack_require__(/*! escape-string-regexp */ \"(ssr)/./node_modules/escape-string-regexp/index.js\");\nconst { isPlainObject } = __webpack_require__(/*! is-plain-object */ \"(ssr)/./node_modules/is-plain-object/dist/is-plain-object.js\");\nconst deepmerge = __webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\");\nconst parseSrcset = __webpack_require__(/*! parse-srcset */ \"(ssr)/./node_modules/parse-srcset/src/parse-srcset.js\");\nconst { parse: postcssParse } = __webpack_require__(/*! postcss */ \"(ssr)/./node_modules/postcss/lib/postcss.js\");\n// Tags that can conceivably represent stand-alone media.\nconst mediaTags = [\n    \"img\",\n    \"audio\",\n    \"video\",\n    \"picture\",\n    \"svg\",\n    \"object\",\n    \"map\",\n    \"iframe\",\n    \"embed\"\n];\n// Tags that are inherently vulnerable to being used in XSS attacks.\nconst vulnerableTags = [\n    \"script\",\n    \"style\"\n];\nfunction each(obj, cb) {\n    if (obj) {\n        Object.keys(obj).forEach(function(key) {\n            cb(obj[key], key);\n        });\n    }\n}\n// Avoid false positives with .__proto__, .hasOwnProperty, etc.\nfunction has(obj, key) {\n    return ({}).hasOwnProperty.call(obj, key);\n}\n// Returns those elements of `a` for which `cb(a)` returns truthy\nfunction filter(a, cb) {\n    const n = [];\n    each(a, function(v) {\n        if (cb(v)) {\n            n.push(v);\n        }\n    });\n    return n;\n}\nfunction isEmptyObject(obj) {\n    for(const key in obj){\n        if (has(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction stringifySrcset(parsedSrcset) {\n    return parsedSrcset.map(function(part) {\n        if (!part.url) {\n            throw new Error(\"URL missing\");\n        }\n        return part.url + (part.w ? ` ${part.w}w` : \"\") + (part.h ? ` ${part.h}h` : \"\") + (part.d ? ` ${part.d}x` : \"\");\n    }).join(\", \");\n}\nmodule.exports = sanitizeHtml;\n// A valid attribute name.\n// We use a tolerant definition based on the set of strings defined by\n// html.spec.whatwg.org/multipage/parsing.html#before-attribute-name-state\n// and html.spec.whatwg.org/multipage/parsing.html#attribute-name-state .\n// The characters accepted are ones which can be appended to the attribute\n// name buffer without triggering a parse error:\n//   * unexpected-equals-sign-before-attribute-name\n//   * unexpected-null-character\n//   * unexpected-character-in-attribute-name\n// We exclude the empty string because it's impossible to get to the after\n// attribute name state with an empty attribute name buffer.\nconst VALID_HTML_ATTRIBUTE_NAME = /^[^\\0\\t\\n\\f\\r /<=>]+$/;\n// Ignore the _recursing flag; it's there for recursive\n// invocation as a guard against this exploit:\n// https://github.com/fb55/htmlparser2/issues/105\nfunction sanitizeHtml(html, options, _recursing) {\n    if (html == null) {\n        return \"\";\n    }\n    if (typeof html === \"number\") {\n        html = html.toString();\n    }\n    let result = \"\";\n    // Used for hot swapping the result variable with an empty string in order to \"capture\" the text written to it.\n    let tempResult = \"\";\n    function Frame(tag, attribs) {\n        const that = this;\n        this.tag = tag;\n        this.attribs = attribs || {};\n        this.tagPosition = result.length;\n        this.text = \"\"; // Node inner text\n        this.mediaChildren = [];\n        this.updateParentNodeText = function() {\n            if (stack.length) {\n                const parentFrame = stack[stack.length - 1];\n                parentFrame.text += that.text;\n            }\n        };\n        this.updateParentNodeMediaChildren = function() {\n            if (stack.length && mediaTags.includes(this.tag)) {\n                const parentFrame = stack[stack.length - 1];\n                parentFrame.mediaChildren.push(this.tag);\n            }\n        };\n    }\n    options = Object.assign({}, sanitizeHtml.defaults, options);\n    options.parser = Object.assign({}, htmlParserDefaults, options.parser);\n    const tagAllowed = function(name) {\n        return options.allowedTags === false || (options.allowedTags || []).indexOf(name) > -1;\n    };\n    // vulnerableTags\n    vulnerableTags.forEach(function(tag) {\n        if (tagAllowed(tag) && !options.allowVulnerableTags) {\n            console.warn(`\\n\\n⚠️ Your \\`allowedTags\\` option includes, \\`${tag}\\`, which is inherently\\nvulnerable to XSS attacks. Please remove it from \\`allowedTags\\`.\\nOr, to disable this warning, add the \\`allowVulnerableTags\\` option\\nand ensure you are accounting for this risk.\\n\\n`);\n        }\n    });\n    // Tags that contain something other than HTML, or where discarding\n    // the text when the tag is disallowed makes sense for other reasons.\n    // If we are not allowing these tags, we should drop their content too.\n    // For other tags you would drop the tag but keep its content.\n    const nonTextTagsArray = options.nonTextTags || [\n        \"script\",\n        \"style\",\n        \"textarea\",\n        \"option\"\n    ];\n    let allowedAttributesMap;\n    let allowedAttributesGlobMap;\n    if (options.allowedAttributes) {\n        allowedAttributesMap = {};\n        allowedAttributesGlobMap = {};\n        each(options.allowedAttributes, function(attributes, tag) {\n            allowedAttributesMap[tag] = [];\n            const globRegex = [];\n            attributes.forEach(function(obj) {\n                if (typeof obj === \"string\" && obj.indexOf(\"*\") >= 0) {\n                    globRegex.push(escapeStringRegexp(obj).replace(/\\\\\\*/g, \".*\"));\n                } else {\n                    allowedAttributesMap[tag].push(obj);\n                }\n            });\n            if (globRegex.length) {\n                allowedAttributesGlobMap[tag] = new RegExp(\"^(\" + globRegex.join(\"|\") + \")$\");\n            }\n        });\n    }\n    const allowedClassesMap = {};\n    const allowedClassesGlobMap = {};\n    const allowedClassesRegexMap = {};\n    each(options.allowedClasses, function(classes, tag) {\n        // Implicitly allows the class attribute\n        if (allowedAttributesMap) {\n            if (!has(allowedAttributesMap, tag)) {\n                allowedAttributesMap[tag] = [];\n            }\n            allowedAttributesMap[tag].push(\"class\");\n        }\n        allowedClassesMap[tag] = classes;\n        if (Array.isArray(classes)) {\n            const globRegex = [];\n            allowedClassesMap[tag] = [];\n            allowedClassesRegexMap[tag] = [];\n            classes.forEach(function(obj) {\n                if (typeof obj === \"string\" && obj.indexOf(\"*\") >= 0) {\n                    globRegex.push(escapeStringRegexp(obj).replace(/\\\\\\*/g, \".*\"));\n                } else if (obj instanceof RegExp) {\n                    allowedClassesRegexMap[tag].push(obj);\n                } else {\n                    allowedClassesMap[tag].push(obj);\n                }\n            });\n            if (globRegex.length) {\n                allowedClassesGlobMap[tag] = new RegExp(\"^(\" + globRegex.join(\"|\") + \")$\");\n            }\n        }\n    });\n    const transformTagsMap = {};\n    let transformTagsAll;\n    each(options.transformTags, function(transform, tag) {\n        let transFun;\n        if (typeof transform === \"function\") {\n            transFun = transform;\n        } else if (typeof transform === \"string\") {\n            transFun = sanitizeHtml.simpleTransform(transform);\n        }\n        if (tag === \"*\") {\n            transformTagsAll = transFun;\n        } else {\n            transformTagsMap[tag] = transFun;\n        }\n    });\n    let depth;\n    let stack;\n    let skipMap;\n    let transformMap;\n    let skipText;\n    let skipTextDepth;\n    let addedText = false;\n    initializeState();\n    const parser = new htmlparser.Parser({\n        onopentag: function(name, attribs) {\n            // If `enforceHtmlBoundary` is `true` and this has found the opening\n            // `html` tag, reset the state.\n            if (options.enforceHtmlBoundary && name === \"html\") {\n                initializeState();\n            }\n            if (skipText) {\n                skipTextDepth++;\n                return;\n            }\n            const frame = new Frame(name, attribs);\n            stack.push(frame);\n            let skip = false;\n            const hasText = !!frame.text;\n            let transformedTag;\n            if (has(transformTagsMap, name)) {\n                transformedTag = transformTagsMap[name](name, attribs);\n                frame.attribs = attribs = transformedTag.attribs;\n                if (transformedTag.text !== undefined) {\n                    frame.innerText = transformedTag.text;\n                }\n                if (name !== transformedTag.tagName) {\n                    frame.name = name = transformedTag.tagName;\n                    transformMap[depth] = transformedTag.tagName;\n                }\n            }\n            if (transformTagsAll) {\n                transformedTag = transformTagsAll(name, attribs);\n                frame.attribs = attribs = transformedTag.attribs;\n                if (name !== transformedTag.tagName) {\n                    frame.name = name = transformedTag.tagName;\n                    transformMap[depth] = transformedTag.tagName;\n                }\n            }\n            if (!tagAllowed(name) || options.disallowedTagsMode === \"recursiveEscape\" && !isEmptyObject(skipMap) || options.nestingLimit != null && depth >= options.nestingLimit) {\n                skip = true;\n                skipMap[depth] = true;\n                if (options.disallowedTagsMode === \"discard\" || options.disallowedTagsMode === \"completelyDiscard\") {\n                    if (nonTextTagsArray.indexOf(name) !== -1) {\n                        skipText = true;\n                        skipTextDepth = 1;\n                    }\n                }\n                skipMap[depth] = true;\n            }\n            depth++;\n            if (skip) {\n                if (options.disallowedTagsMode === \"discard\" || options.disallowedTagsMode === \"completelyDiscard\") {\n                    // We want the contents but not this tag\n                    return;\n                }\n                tempResult = result;\n                result = \"\";\n            }\n            result += \"<\" + name;\n            if (name === \"script\") {\n                if (options.allowedScriptHostnames || options.allowedScriptDomains) {\n                    frame.innerText = \"\";\n                }\n            }\n            if (!allowedAttributesMap || has(allowedAttributesMap, name) || allowedAttributesMap[\"*\"]) {\n                each(attribs, function(value, a) {\n                    if (!VALID_HTML_ATTRIBUTE_NAME.test(a)) {\n                        // This prevents part of an attribute name in the output from being\n                        // interpreted as the end of an attribute, or end of a tag.\n                        delete frame.attribs[a];\n                        return;\n                    }\n                    // If the value is empty, check if the attribute is in the allowedEmptyAttributes array.\n                    // If it is not in the allowedEmptyAttributes array, and it is a known non-boolean attribute, delete it\n                    // List taken from https://html.spec.whatwg.org/multipage/indices.html#attributes-3\n                    if (value === \"\" && !options.allowedEmptyAttributes.includes(a) && (options.nonBooleanAttributes.includes(a) || options.nonBooleanAttributes.includes(\"*\"))) {\n                        delete frame.attribs[a];\n                        return;\n                    }\n                    // check allowedAttributesMap for the element and attribute and modify the value\n                    // as necessary if there are specific values defined.\n                    let passedAllowedAttributesMapCheck = false;\n                    if (!allowedAttributesMap || has(allowedAttributesMap, name) && allowedAttributesMap[name].indexOf(a) !== -1 || allowedAttributesMap[\"*\"] && allowedAttributesMap[\"*\"].indexOf(a) !== -1 || has(allowedAttributesGlobMap, name) && allowedAttributesGlobMap[name].test(a) || allowedAttributesGlobMap[\"*\"] && allowedAttributesGlobMap[\"*\"].test(a)) {\n                        passedAllowedAttributesMapCheck = true;\n                    } else if (allowedAttributesMap && allowedAttributesMap[name]) {\n                        for (const o of allowedAttributesMap[name]){\n                            if (isPlainObject(o) && o.name && o.name === a) {\n                                passedAllowedAttributesMapCheck = true;\n                                let newValue = \"\";\n                                if (o.multiple === true) {\n                                    // verify the values that are allowed\n                                    const splitStrArray = value.split(\" \");\n                                    for (const s of splitStrArray){\n                                        if (o.values.indexOf(s) !== -1) {\n                                            if (newValue === \"\") {\n                                                newValue = s;\n                                            } else {\n                                                newValue += \" \" + s;\n                                            }\n                                        }\n                                    }\n                                } else if (o.values.indexOf(value) >= 0) {\n                                    // verified an allowed value matches the entire attribute value\n                                    newValue = value;\n                                }\n                                value = newValue;\n                            }\n                        }\n                    }\n                    if (passedAllowedAttributesMapCheck) {\n                        if (options.allowedSchemesAppliedToAttributes.indexOf(a) !== -1) {\n                            if (naughtyHref(name, value)) {\n                                delete frame.attribs[a];\n                                return;\n                            }\n                        }\n                        if (name === \"script\" && a === \"src\") {\n                            let allowed = true;\n                            try {\n                                const parsed = parseUrl(value);\n                                if (options.allowedScriptHostnames || options.allowedScriptDomains) {\n                                    const allowedHostname = (options.allowedScriptHostnames || []).find(function(hostname) {\n                                        return hostname === parsed.url.hostname;\n                                    });\n                                    const allowedDomain = (options.allowedScriptDomains || []).find(function(domain) {\n                                        return parsed.url.hostname === domain || parsed.url.hostname.endsWith(`.${domain}`);\n                                    });\n                                    allowed = allowedHostname || allowedDomain;\n                                }\n                            } catch (e) {\n                                allowed = false;\n                            }\n                            if (!allowed) {\n                                delete frame.attribs[a];\n                                return;\n                            }\n                        }\n                        if (name === \"iframe\" && a === \"src\") {\n                            let allowed = true;\n                            try {\n                                const parsed = parseUrl(value);\n                                if (parsed.isRelativeUrl) {\n                                    // default value of allowIframeRelativeUrls is true\n                                    // unless allowedIframeHostnames or allowedIframeDomains specified\n                                    allowed = has(options, \"allowIframeRelativeUrls\") ? options.allowIframeRelativeUrls : !options.allowedIframeHostnames && !options.allowedIframeDomains;\n                                } else if (options.allowedIframeHostnames || options.allowedIframeDomains) {\n                                    const allowedHostname = (options.allowedIframeHostnames || []).find(function(hostname) {\n                                        return hostname === parsed.url.hostname;\n                                    });\n                                    const allowedDomain = (options.allowedIframeDomains || []).find(function(domain) {\n                                        return parsed.url.hostname === domain || parsed.url.hostname.endsWith(`.${domain}`);\n                                    });\n                                    allowed = allowedHostname || allowedDomain;\n                                }\n                            } catch (e) {\n                                // Unparseable iframe src\n                                allowed = false;\n                            }\n                            if (!allowed) {\n                                delete frame.attribs[a];\n                                return;\n                            }\n                        }\n                        if (a === \"srcset\") {\n                            try {\n                                let parsed = parseSrcset(value);\n                                parsed.forEach(function(value) {\n                                    if (naughtyHref(\"srcset\", value.url)) {\n                                        value.evil = true;\n                                    }\n                                });\n                                parsed = filter(parsed, function(v) {\n                                    return !v.evil;\n                                });\n                                if (!parsed.length) {\n                                    delete frame.attribs[a];\n                                    return;\n                                } else {\n                                    value = stringifySrcset(filter(parsed, function(v) {\n                                        return !v.evil;\n                                    }));\n                                    frame.attribs[a] = value;\n                                }\n                            } catch (e) {\n                                // Unparseable srcset\n                                delete frame.attribs[a];\n                                return;\n                            }\n                        }\n                        if (a === \"class\") {\n                            const allowedSpecificClasses = allowedClassesMap[name];\n                            const allowedWildcardClasses = allowedClassesMap[\"*\"];\n                            const allowedSpecificClassesGlob = allowedClassesGlobMap[name];\n                            const allowedSpecificClassesRegex = allowedClassesRegexMap[name];\n                            const allowedWildcardClassesGlob = allowedClassesGlobMap[\"*\"];\n                            const allowedClassesGlobs = [\n                                allowedSpecificClassesGlob,\n                                allowedWildcardClassesGlob\n                            ].concat(allowedSpecificClassesRegex).filter(function(t) {\n                                return t;\n                            });\n                            if (allowedSpecificClasses && allowedWildcardClasses) {\n                                value = filterClasses(value, deepmerge(allowedSpecificClasses, allowedWildcardClasses), allowedClassesGlobs);\n                            } else {\n                                value = filterClasses(value, allowedSpecificClasses || allowedWildcardClasses, allowedClassesGlobs);\n                            }\n                            if (!value.length) {\n                                delete frame.attribs[a];\n                                return;\n                            }\n                        }\n                        if (a === \"style\") {\n                            if (options.parseStyleAttributes) {\n                                try {\n                                    const abstractSyntaxTree = postcssParse(name + \" {\" + value + \"}\", {\n                                        map: false\n                                    });\n                                    const filteredAST = filterCss(abstractSyntaxTree, options.allowedStyles);\n                                    value = stringifyStyleAttributes(filteredAST);\n                                    if (value.length === 0) {\n                                        delete frame.attribs[a];\n                                        return;\n                                    }\n                                } catch (e) {\n                                    if (false) {}\n                                    delete frame.attribs[a];\n                                    return;\n                                }\n                            } else if (options.allowedStyles) {\n                                throw new Error(\"allowedStyles option cannot be used together with parseStyleAttributes: false.\");\n                            }\n                        }\n                        result += \" \" + a;\n                        if (value && value.length) {\n                            result += '=\"' + escapeHtml(value, true) + '\"';\n                        } else if (options.allowedEmptyAttributes.includes(a)) {\n                            result += '=\"\"';\n                        }\n                    } else {\n                        delete frame.attribs[a];\n                    }\n                });\n            }\n            if (options.selfClosing.indexOf(name) !== -1) {\n                result += \" />\";\n            } else {\n                result += \">\";\n                if (frame.innerText && !hasText && !options.textFilter) {\n                    result += escapeHtml(frame.innerText);\n                    addedText = true;\n                }\n            }\n            if (skip) {\n                result = tempResult + escapeHtml(result);\n                tempResult = \"\";\n            }\n        },\n        ontext: function(text) {\n            if (skipText) {\n                return;\n            }\n            const lastFrame = stack[stack.length - 1];\n            let tag;\n            if (lastFrame) {\n                tag = lastFrame.tag;\n                // If inner text was set by transform function then let's use it\n                text = lastFrame.innerText !== undefined ? lastFrame.innerText : text;\n            }\n            if (options.disallowedTagsMode === \"completelyDiscard\" && !tagAllowed(tag)) {\n                text = \"\";\n            } else if ((options.disallowedTagsMode === \"discard\" || options.disallowedTagsMode === \"completelyDiscard\") && (tag === \"script\" || tag === \"style\")) {\n                // htmlparser2 gives us these as-is. Escaping them ruins the content. Allowing\n                // script tags is, by definition, game over for XSS protection, so if that's\n                // your concern, don't allow them. The same is essentially true for style tags\n                // which have their own collection of XSS vectors.\n                result += text;\n            } else {\n                const escaped = escapeHtml(text, false);\n                if (options.textFilter && !addedText) {\n                    result += options.textFilter(escaped, tag);\n                } else if (!addedText) {\n                    result += escaped;\n                }\n            }\n            if (stack.length) {\n                const frame = stack[stack.length - 1];\n                frame.text += text;\n            }\n        },\n        onclosetag: function(name, isImplied) {\n            if (skipText) {\n                skipTextDepth--;\n                if (!skipTextDepth) {\n                    skipText = false;\n                } else {\n                    return;\n                }\n            }\n            const frame = stack.pop();\n            if (!frame) {\n                // Do not crash on bad markup\n                return;\n            }\n            if (frame.tag !== name) {\n                // Another case of bad markup.\n                // Push to stack, so that it will be used in future closing tags.\n                stack.push(frame);\n                return;\n            }\n            skipText = options.enforceHtmlBoundary ? name === \"html\" : false;\n            depth--;\n            const skip = skipMap[depth];\n            if (skip) {\n                delete skipMap[depth];\n                if (options.disallowedTagsMode === \"discard\" || options.disallowedTagsMode === \"completelyDiscard\") {\n                    frame.updateParentNodeText();\n                    return;\n                }\n                tempResult = result;\n                result = \"\";\n            }\n            if (transformMap[depth]) {\n                name = transformMap[depth];\n                delete transformMap[depth];\n            }\n            if (options.exclusiveFilter && options.exclusiveFilter(frame)) {\n                result = result.substr(0, frame.tagPosition);\n                return;\n            }\n            frame.updateParentNodeMediaChildren();\n            frame.updateParentNodeText();\n            if (// Already output />\n            options.selfClosing.indexOf(name) !== -1 || // Escaped tag, closing tag is implied\n            isImplied && !tagAllowed(name) && [\n                \"escape\",\n                \"recursiveEscape\"\n            ].indexOf(options.disallowedTagsMode) >= 0) {\n                if (skip) {\n                    result = tempResult;\n                    tempResult = \"\";\n                }\n                return;\n            }\n            result += \"</\" + name + \">\";\n            if (skip) {\n                result = tempResult + escapeHtml(result);\n                tempResult = \"\";\n            }\n            addedText = false;\n        }\n    }, options.parser);\n    parser.write(html);\n    parser.end();\n    return result;\n    function initializeState() {\n        result = \"\";\n        depth = 0;\n        stack = [];\n        skipMap = {};\n        transformMap = {};\n        skipText = false;\n        skipTextDepth = 0;\n    }\n    function escapeHtml(s, quote) {\n        if (typeof s !== \"string\") {\n            s = s + \"\";\n        }\n        if (options.parser.decodeEntities) {\n            s = s.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n            if (quote) {\n                s = s.replace(/\"/g, \"&quot;\");\n            }\n        }\n        // TODO: this is inadequate because it will pass `&0;`. This approach\n        // will not work, each & must be considered with regard to whether it\n        // is followed by a 100% syntactically valid entity or not, and escaped\n        // if it is not. If this bothers you, don't set parser.decodeEntities\n        // to false. (The default is true.)\n        s = s.replace(/&(?![a-zA-Z0-9#]{1,20};)/g, \"&amp;\") // Match ampersands not part of existing HTML entity\n        .replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        if (quote) {\n            s = s.replace(/\"/g, \"&quot;\");\n        }\n        return s;\n    }\n    function naughtyHref(name, href) {\n        // Browsers ignore character codes of 32 (space) and below in a surprising\n        // number of situations. Start reading here:\n        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab\n        // eslint-disable-next-line no-control-regex\n        href = href.replace(/[\\x00-\\x20]+/g, \"\");\n        // Clobber any comments in URLs, which the browser might\n        // interpret inside an XML data island, allowing\n        // a javascript: URL to be snuck through\n        while(true){\n            const firstIndex = href.indexOf(\"<!--\");\n            if (firstIndex === -1) {\n                break;\n            }\n            const lastIndex = href.indexOf(\"-->\", firstIndex + 4);\n            if (lastIndex === -1) {\n                break;\n            }\n            href = href.substring(0, firstIndex) + href.substring(lastIndex + 3);\n        }\n        // Case insensitive so we don't get faked out by JAVASCRIPT #1\n        // Allow more characters after the first so we don't get faked\n        // out by certain schemes browsers accept\n        const matches = href.match(/^([a-zA-Z][a-zA-Z0-9.\\-+]*):/);\n        if (!matches) {\n            // Protocol-relative URL starting with any combination of '/' and '\\'\n            if (href.match(/^[/\\\\]{2}/)) {\n                return !options.allowProtocolRelative;\n            }\n            // No scheme\n            return false;\n        }\n        const scheme = matches[1].toLowerCase();\n        if (has(options.allowedSchemesByTag, name)) {\n            return options.allowedSchemesByTag[name].indexOf(scheme) === -1;\n        }\n        return !options.allowedSchemes || options.allowedSchemes.indexOf(scheme) === -1;\n    }\n    function parseUrl(value) {\n        value = value.replace(/^(\\w+:)?\\s*[\\\\/]\\s*[\\\\/]/, \"$1//\");\n        if (value.startsWith(\"relative:\")) {\n            // An attempt to exploit our workaround for base URLs being\n            // mandatory for relative URL validation in the WHATWG\n            // URL parser, reject it\n            throw new Error(\"relative: exploit attempt\");\n        }\n        // naughtyHref is in charge of whether protocol relative URLs\n        // are cool. Here we are concerned just with allowed hostnames and\n        // whether to allow relative URLs.\n        //\n        // Build a placeholder \"base URL\" against which any reasonable\n        // relative URL may be parsed successfully\n        let base = \"relative://relative-site\";\n        for(let i = 0; i < 100; i++){\n            base += `/${i}`;\n        }\n        const parsed = new URL(value, base);\n        const isRelativeUrl = parsed && parsed.hostname === \"relative-site\" && parsed.protocol === \"relative:\";\n        return {\n            isRelativeUrl,\n            url: parsed\n        };\n    }\n    /**\n   * Filters user input css properties by allowlisted regex attributes.\n   * Modifies the abstractSyntaxTree object.\n   *\n   * @param {object} abstractSyntaxTree  - Object representation of CSS attributes.\n   * @property {array[Declaration]} abstractSyntaxTree.nodes[0] - Each object cointains prop and value key, i.e { prop: 'color', value: 'red' }.\n   * @param {object} allowedStyles       - Keys are properties (i.e color), value is list of permitted regex rules (i.e /green/i).\n   * @return {object}                    - The modified tree.\n   */ function filterCss(abstractSyntaxTree, allowedStyles) {\n        if (!allowedStyles) {\n            return abstractSyntaxTree;\n        }\n        const astRules = abstractSyntaxTree.nodes[0];\n        let selectedRule;\n        // Merge global and tag-specific styles into new AST.\n        if (allowedStyles[astRules.selector] && allowedStyles[\"*\"]) {\n            selectedRule = deepmerge(allowedStyles[astRules.selector], allowedStyles[\"*\"]);\n        } else {\n            selectedRule = allowedStyles[astRules.selector] || allowedStyles[\"*\"];\n        }\n        if (selectedRule) {\n            abstractSyntaxTree.nodes[0].nodes = astRules.nodes.reduce(filterDeclarations(selectedRule), []);\n        }\n        return abstractSyntaxTree;\n    }\n    /**\n   * Extracts the style attributes from an AbstractSyntaxTree and formats those\n   * values in the inline style attribute format.\n   *\n   * @param  {AbstractSyntaxTree} filteredAST\n   * @return {string}             - Example: \"color:yellow;text-align:center !important;font-family:helvetica;\"\n   */ function stringifyStyleAttributes(filteredAST) {\n        return filteredAST.nodes[0].nodes.reduce(function(extractedAttributes, attrObject) {\n            extractedAttributes.push(`${attrObject.prop}:${attrObject.value}${attrObject.important ? \" !important\" : \"\"}`);\n            return extractedAttributes;\n        }, []).join(\";\");\n    }\n    /**\n    * Filters the existing attributes for the given property. Discards any attributes\n    * which don't match the allowlist.\n    *\n    * @param  {object} selectedRule             - Example: { color: red, font-family: helvetica }\n    * @param  {array} allowedDeclarationsList   - List of declarations which pass the allowlist.\n    * @param  {object} attributeObject          - Object representing the current css property.\n    * @property {string} attributeObject.type   - Typically 'declaration'.\n    * @property {string} attributeObject.prop   - The CSS property, i.e 'color'.\n    * @property {string} attributeObject.value  - The corresponding value to the css property, i.e 'red'.\n    * @return {function}                        - When used in Array.reduce, will return an array of Declaration objects\n    */ function filterDeclarations(selectedRule) {\n        return function(allowedDeclarationsList, attributeObject) {\n            // If this property is allowlisted...\n            if (has(selectedRule, attributeObject.prop)) {\n                const matchesRegex = selectedRule[attributeObject.prop].some(function(regularExpression) {\n                    return regularExpression.test(attributeObject.value);\n                });\n                if (matchesRegex) {\n                    allowedDeclarationsList.push(attributeObject);\n                }\n            }\n            return allowedDeclarationsList;\n        };\n    }\n    function filterClasses(classes, allowed, allowedGlobs) {\n        if (!allowed) {\n            // The class attribute is allowed without filtering on this tag\n            return classes;\n        }\n        classes = classes.split(/\\s+/);\n        return classes.filter(function(clss) {\n            return allowed.indexOf(clss) !== -1 || allowedGlobs.some(function(glob) {\n                return glob.test(clss);\n            });\n        }).join(\" \");\n    }\n}\n// Defaults are accessible to you so that you can use them as a starting point\n// programmatically if you wish\nconst htmlParserDefaults = {\n    decodeEntities: true\n};\nsanitizeHtml.defaults = {\n    allowedTags: [\n        // Sections derived from MDN element categories and limited to the more\n        // benign categories.\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n        // Content sectioning\n        \"address\",\n        \"article\",\n        \"aside\",\n        \"footer\",\n        \"header\",\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\",\n        \"hgroup\",\n        \"main\",\n        \"nav\",\n        \"section\",\n        // Text content\n        \"blockquote\",\n        \"dd\",\n        \"div\",\n        \"dl\",\n        \"dt\",\n        \"figcaption\",\n        \"figure\",\n        \"hr\",\n        \"li\",\n        \"main\",\n        \"ol\",\n        \"p\",\n        \"pre\",\n        \"ul\",\n        // Inline text semantics\n        \"a\",\n        \"abbr\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"br\",\n        \"cite\",\n        \"code\",\n        \"data\",\n        \"dfn\",\n        \"em\",\n        \"i\",\n        \"kbd\",\n        \"mark\",\n        \"q\",\n        \"rb\",\n        \"rp\",\n        \"rt\",\n        \"rtc\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"small\",\n        \"span\",\n        \"strong\",\n        \"sub\",\n        \"sup\",\n        \"time\",\n        \"u\",\n        \"var\",\n        \"wbr\",\n        // Table content\n        \"caption\",\n        \"col\",\n        \"colgroup\",\n        \"table\",\n        \"tbody\",\n        \"td\",\n        \"tfoot\",\n        \"th\",\n        \"thead\",\n        \"tr\"\n    ],\n    // Tags that cannot be boolean\n    nonBooleanAttributes: [\n        \"abbr\",\n        \"accept\",\n        \"accept-charset\",\n        \"accesskey\",\n        \"action\",\n        \"allow\",\n        \"alt\",\n        \"as\",\n        \"autocapitalize\",\n        \"autocomplete\",\n        \"blocking\",\n        \"charset\",\n        \"cite\",\n        \"class\",\n        \"color\",\n        \"cols\",\n        \"colspan\",\n        \"content\",\n        \"contenteditable\",\n        \"coords\",\n        \"crossorigin\",\n        \"data\",\n        \"datetime\",\n        \"decoding\",\n        \"dir\",\n        \"dirname\",\n        \"download\",\n        \"draggable\",\n        \"enctype\",\n        \"enterkeyhint\",\n        \"fetchpriority\",\n        \"for\",\n        \"form\",\n        \"formaction\",\n        \"formenctype\",\n        \"formmethod\",\n        \"formtarget\",\n        \"headers\",\n        \"height\",\n        \"hidden\",\n        \"high\",\n        \"href\",\n        \"hreflang\",\n        \"http-equiv\",\n        \"id\",\n        \"imagesizes\",\n        \"imagesrcset\",\n        \"inputmode\",\n        \"integrity\",\n        \"is\",\n        \"itemid\",\n        \"itemprop\",\n        \"itemref\",\n        \"itemtype\",\n        \"kind\",\n        \"label\",\n        \"lang\",\n        \"list\",\n        \"loading\",\n        \"low\",\n        \"max\",\n        \"maxlength\",\n        \"media\",\n        \"method\",\n        \"min\",\n        \"minlength\",\n        \"name\",\n        \"nonce\",\n        \"optimum\",\n        \"pattern\",\n        \"ping\",\n        \"placeholder\",\n        \"popover\",\n        \"popovertarget\",\n        \"popovertargetaction\",\n        \"poster\",\n        \"preload\",\n        \"referrerpolicy\",\n        \"rel\",\n        \"rows\",\n        \"rowspan\",\n        \"sandbox\",\n        \"scope\",\n        \"shape\",\n        \"size\",\n        \"sizes\",\n        \"slot\",\n        \"span\",\n        \"spellcheck\",\n        \"src\",\n        \"srcdoc\",\n        \"srclang\",\n        \"srcset\",\n        \"start\",\n        \"step\",\n        \"style\",\n        \"tabindex\",\n        \"target\",\n        \"title\",\n        \"translate\",\n        \"type\",\n        \"usemap\",\n        \"value\",\n        \"width\",\n        \"wrap\",\n        // Event handlers\n        \"onauxclick\",\n        \"onafterprint\",\n        \"onbeforematch\",\n        \"onbeforeprint\",\n        \"onbeforeunload\",\n        \"onbeforetoggle\",\n        \"onblur\",\n        \"oncancel\",\n        \"oncanplay\",\n        \"oncanplaythrough\",\n        \"onchange\",\n        \"onclick\",\n        \"onclose\",\n        \"oncontextlost\",\n        \"oncontextmenu\",\n        \"oncontextrestored\",\n        \"oncopy\",\n        \"oncuechange\",\n        \"oncut\",\n        \"ondblclick\",\n        \"ondrag\",\n        \"ondragend\",\n        \"ondragenter\",\n        \"ondragleave\",\n        \"ondragover\",\n        \"ondragstart\",\n        \"ondrop\",\n        \"ondurationchange\",\n        \"onemptied\",\n        \"onended\",\n        \"onerror\",\n        \"onfocus\",\n        \"onformdata\",\n        \"onhashchange\",\n        \"oninput\",\n        \"oninvalid\",\n        \"onkeydown\",\n        \"onkeypress\",\n        \"onkeyup\",\n        \"onlanguagechange\",\n        \"onload\",\n        \"onloadeddata\",\n        \"onloadedmetadata\",\n        \"onloadstart\",\n        \"onmessage\",\n        \"onmessageerror\",\n        \"onmousedown\",\n        \"onmouseenter\",\n        \"onmouseleave\",\n        \"onmousemove\",\n        \"onmouseout\",\n        \"onmouseover\",\n        \"onmouseup\",\n        \"onoffline\",\n        \"ononline\",\n        \"onpagehide\",\n        \"onpageshow\",\n        \"onpaste\",\n        \"onpause\",\n        \"onplay\",\n        \"onplaying\",\n        \"onpopstate\",\n        \"onprogress\",\n        \"onratechange\",\n        \"onreset\",\n        \"onresize\",\n        \"onrejectionhandled\",\n        \"onscroll\",\n        \"onscrollend\",\n        \"onsecuritypolicyviolation\",\n        \"onseeked\",\n        \"onseeking\",\n        \"onselect\",\n        \"onslotchange\",\n        \"onstalled\",\n        \"onstorage\",\n        \"onsubmit\",\n        \"onsuspend\",\n        \"ontimeupdate\",\n        \"ontoggle\",\n        \"onunhandledrejection\",\n        \"onunload\",\n        \"onvolumechange\",\n        \"onwaiting\",\n        \"onwheel\"\n    ],\n    disallowedTagsMode: \"discard\",\n    allowedAttributes: {\n        a: [\n            \"href\",\n            \"name\",\n            \"target\"\n        ],\n        // We don't currently allow img itself by default, but\n        // these attributes would make sense if we did.\n        img: [\n            \"src\",\n            \"srcset\",\n            \"alt\",\n            \"title\",\n            \"width\",\n            \"height\",\n            \"loading\"\n        ]\n    },\n    allowedEmptyAttributes: [\n        \"alt\"\n    ],\n    // Lots of these won't come up by default because we don't allow them\n    selfClosing: [\n        \"img\",\n        \"br\",\n        \"hr\",\n        \"area\",\n        \"base\",\n        \"basefont\",\n        \"input\",\n        \"link\",\n        \"meta\"\n    ],\n    // URL schemes we permit\n    allowedSchemes: [\n        \"http\",\n        \"https\",\n        \"ftp\",\n        \"mailto\",\n        \"tel\"\n    ],\n    allowedSchemesByTag: {},\n    allowedSchemesAppliedToAttributes: [\n        \"href\",\n        \"src\",\n        \"cite\"\n    ],\n    allowProtocolRelative: true,\n    enforceHtmlBoundary: false,\n    parseStyleAttributes: true\n};\nsanitizeHtml.simpleTransform = function(newTagName, newAttribs, merge) {\n    merge = merge === undefined ? true : merge;\n    newAttribs = newAttribs || {};\n    return function(tagName, attribs) {\n        let attrib;\n        if (merge) {\n            for(attrib in newAttribs){\n                attribs[attrib] = newAttribs[attrib];\n            }\n        } else {\n            attribs = newAttribs;\n        }\n        return {\n            tagName: newTagName,\n            attribs: attribs\n        };\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sanitize-html/index.js\n");

/***/ })

};
;